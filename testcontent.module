<?php

/**
* testcontent.module based on info on http://www.avidheap.org/2013/how-to-programmatically-create-a-custom-content-type-in-drupal-7
*/

/**
* Implements hook_node_info.
*/

function testcontent_node_info(){
  $content['item'] = array(
    'name' => t('Item'),
    // check https://api.drupal.org/api/drupal/modules%21node%21node.api.php/function/hook_node_info/7
    //for more information on the base key
    'base' => 'item',
    'description' => t('Contains information about an item, eg title, description,
      source url, ...'),
    'locked' => FALSE,
    'has_title' => TRUE,
  );
  return $content;
}

/**
 * Implements hook_form().
 */
function testcontent_form($node, $form_state) {
  return node_content_form($node, $form_state);
}
/**
* Implements hook_node_type_insert. This hook is called when a new content type is added.
*/
function testcontent_node_type_insert($content_type) {
  if ($content_type->type == 'item') {
    // First we add the body field. Node API helpfully gives us
    // node_add_body_field().
    // We'll set the body label now, although we could also set
    // it along with our other instance properties later.
    $body_instance = node_add_body_field($content_type, t('Item Description'));

    // Add our example_node_list view mode to the body instance
    // display by instructing the body to display as a summary
    $body_instance['display']['example_node_list'] = array(
      'label' => 'hidden', 
      'type' => 'text_summary_or_trimmed',
    );

    // Save our changes to the body field instance.
    field_update_instance($body_instance);

    // Create all the fields we are adding to our content type.
    foreach (_testcontent_installed_fields() as $field) {
      dsm('installing '.$field);
      //only create field if it does not exists
      if(field_info_field($field['field_name']) == NULL){
        field_create_field($field);
      }
    }

    // Create all the instances for our fields.
    foreach (_testcontent_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'item';
      //only create field instance if does not exists
      if(field_info_instance('node',$instance['field_name'],'item') == NULL){
        field_create_instance($instance);
      }
    }
  }
}
/**
* Returns the fields for this content type.
*/
function _testcontent_installed_fields() {
  return array(
  /*
    'node_example_color' => array(
      'field_name' => 'node_example_color', 
      'cardinality' => 3, 
      'type' => 'text', 
      'settings' => array(
        'max_length' => 60,
      ),
    ), 
    'node_example_quantity' => array(
      'field_name' => 'node_example_quantity', 
      'cardinality' => 1, 
      'type' => 'text',
    ), 
    'node_example_image' => array(
      'field_name' => 'node_example_image', 
      'type' => 'image', 
      'cardinality' => 1,
    ),
    */
    //now I'll add my own fields
    'item_source_list' => array(
      'field_name' => 'item_source_list',
      'cardinality' => 1,
      //this info is from https://api.drupal.org/api/drupal/modules%21field%21modules%21list%21list.module/function/list_field_info/7
      'type' => 'list_text',
      'settings' => array(
        'allowed_values' => array('bol.com','amazon.com','amazon.fr'),
      ),
      
    ),
    'item_source_link' => array(
      'field_name' => 'item_source_link',
      'cardinality' => 1,
      'type' => 'link_field',
      'settings' => array(
        'title' => 'none',
      ),
    ),
    'item_image' => array(
      'field_name' => 'item_image',
      'cardinality' => 1,
      'type' => 'image',
      //default settings are ok
      //cf https://api.drupal.org/api/drupal/modules%21image%21image.field.inc/function/image_field_info/7
    ),
    'item_code' => array(
      'field_name' => 'item_code',
      'cardinality' => 1,
      'type' => 'text',
    ),
    //REMEMBER: if you add a new field, don't forget to delete the item record from the node_type table. 
    //If you don't, the new field will not appear!
  );
}

/**
* Define the field instance of our content type.
*/
function _testcontent_installed_instances() {
  return array(
  /*
    'node_example_color' => array(
      'field_name' => 'node_example_color', 
      'label' => t('The colors available for this object.'), 
      'widget' => array(
        'type' => 'text_textfield',
      ), 
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden', 
          'type' => 'node_example_colors',
        ),
      ),
    ), 
    'node_example_quantity' => array(
      'field_name' => 'node_example_quantity', 
      'label' => t('Quantity required'), 
      'type' => 'text', 
      'widget' => array(
        'type' => 'text_textfield',
      ), 
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden', 
          'type' => 'hidden',
        ),
      ),
    ), 
    'node_example_image' => array(
      'field_name' => 'node_example_image', 
      'label' => t('Upload an image:'), 
      'required' => FALSE, 
      'widget' => array(
        'type' => 'image_image', 
        'weight' => 2.10,
      ), 
      'display' => array(
        'example_node_list' => array(
          'label' => 'hidden', 
          'type' => 'image_link_content__thumbnail',
        ),
      ),
    ),
    */
    //my own part
    'item_source_list' => array(
      'field_name' => 'item_source_list',
      'label' => t('Source'),
      'description' => ('The website you found this item.'),
      'required' => TRUE,
    ),
    'item_source_link' => array(
      'field_name' => 'item_source_link',
      'label' => t('Product link'),
      'description' => t('Online page with information about this item.'),
      'settings' => array(
        'title' => 'none',
      ),
    ),
    'item_image' => array(
      'field_name' => 'item_image',
      'label' => t('Product image'),
      'description' => t('Image of the item, often the cover in case of a book or dvd.'),
      'required' => FALSE,
      //default settings are ok
      //cf https://api.drupal.org/api/drupal/modules%21image%21image.field.inc/function/image_field_info/7
    ),
    'item_code' => array(
      'field_name' => 'item_code',
      'label' => t('Product code'),
      'description' => t('The unique code of the item.'),
      'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),
    ),
  );
}